<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.10">
  <POU Name="P2_Robot" Id="{a2c2abf6-5b00-43a0-8df1-40df6663f513}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM P2_Robot
VAR
	stPos					:ST_PosData;
	tCycleTime				:TON;
	bInProcess				:BOOL := FALSE;
	bPcbaScrap				:BOOL := FALSE;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*Időzítők***************************************************)
IF (stPos.nState>10000) AND (stPos.nState<100000) AND NOT tCycleTime.Q THEN
	stPos.nCycleTime := TIME_TO_REAL(tCycleTime.ET)/1000;
END_IF
tCycleTime(IN:= (stPos.nState>10000) AND (stPos.nState<150000), PT:= T#200S);							// A palettára várakozás nincs beszámolva
(*Triggerek**************************************************)

(*Vész rendszer**********************************************)
IF	(NOT (i_bEmyOK AND fbDoor.bDoorsLocked) AND stPos.nState > 0) OR									// Nincs vészkör, vagy
	(NOT i_bDoorOK AND (stPos.nState>=60 AND stPos.nState<=1000)) OR									// alaphelyzetfelvétel közbe megszűnik az ajtókör vagy
	(NOT i_bDoorOK AND (stPos.nState>=10060 AND stPos.nState<=100060)) THEN							// folyamat közbe megszűnik az ajtókör 
		stPos.nState := 0;
END_IF;

(*Hibakezelés************************************************)
IF stPos.nState > 0 AND stPos.nState < 150000 THEN
	stPos.nStateLast := stPos.nState;
	IF	fbP2Lift.bError OR
		fbP2PalletDataExchange.bError OR
		fbP2KRC4.bError OR
		(NOT fbP2KRC4.bReady AND stPos.nState >= 10000 AND stPos.nState < 150000) OR
		stPos.bError THEN
			stPos.nState := 200000;
	END_IF
END_IF

(*Engedélyek *************************************************)
IF stPos.nState <= 10000
	OR stPos.nState = 150000
	OR stPos.nState = 100000
	OR stPos.nState >= 200000
THEN
	stPos.bManualModeEnable := TRUE;
ELSE
	stPos.bManualModeEnable := FALSE;
END_IF

IF stPos.nState = 0
	OR stPos.nState = 10000
	OR stPos.nState = 100000
	OR stPos.nState = 150000
	OR stPos.nState >= 200000
THEN
	stPos.bDoorOpenEnable := TRUE;
ELSE
	stPos.bDoorOpenEnable := FALSE;
END_IF

(*Kézi üzem *************************************************)
IF	bManualMode OR
	NOT fbP2KRC4.RobotIn.Status.bExt THEN						// A pendantról is manuálba lehet küldeni.
		stPos.nState := 150000;
END_IF

(*Automata üzem *********************************************)
CASE stPos.nState OF
{region "Init process"}
	0:		stPos.sState := CONCAT(UDINT_TO_STRING(stPos.nState) ,' - Vészkör vagy ajtókör bontva - Működtetések törlése');
			fbP2Lift.bBasePosCmd := TRUE;
			fbP2Lift.bWorkPosCmd := FALSE;
			fbP2KRC4.bAutoCycle := FALSE;
			fbP2KRC4.bExecuteProg := FALSE;
			fbP2KRC4.nProgNr := 0;
			fbP2PalletDataExchange.eCommand := NoCmd;
			stPos.bError := FALSE;
			stPos.nErrorCode := 0;
			IF i_bDoorOK THEN
				IF bStepEnable THEN
					stPos.nState := stPos.nState + 20;
				END_IF
			END_IF
			
	20:		stPos.sState := CONCAT(UDINT_TO_STRING(stPos.nState) ,' - Alaphelyzetfelvétel - Kiemelő ellenőrzése');
			IF fbP2Lift.i_bBasePos THEN
				IF bStepEnable THEN								// A kiemelő alaphelyzetbe volt akkor nincs kiemelés
					stPos.nState := 100;
				END_IF
			ELSE
				IF bStepEnable THEN								// A paletta már ki volt emelve -> Lehet hogy a robot még a PCB alatt van
					stPos.nState := 200;							// ezért ki kell emelni a palettát különben valami törni fog !
				END_IF
			END_IF


	100:	stPos.sState := CONCAT(UDINT_TO_STRING(stPos.nState) ,' - Alaphelyzetfelvétel - Kiemelő alaphelyzetbe');
			fbP2Lift.bBasePosCmd := TRUE;
			fbP2Lift.bWorkPosCmd := FALSE;
			IF fbP2Lift.bBasePosStab THEN
				IF bStepEnable THEN
					stPos.nState := 300;
				END_IF
			END_IF

	200:	stPos.sState := CONCAT(UDINT_TO_STRING(stPos.nState) ,' - Alaphelyzetfelvétel - Kiemelő munkahelyzetbe');
			fbP2Lift.bBasePosCmd := FALSE;
			fbP2Lift.bWorkPosCmd := TRUE;
			IF fbP2Lift.bWorkPosStab THEN
				IF bStepEnable THEN
					stPos.nState := 300;
				END_IF
			END_IF

	300:	stPos.sState := CONCAT(UDINT_TO_STRING(stPos.nState) ,' - Alaphelyzetfelvétel - Várakozás robot zóna engedélyre');
			IF fbP2KRC4.bZoneEnable THEN
				IF bStepEnable THEN
					stPos.nState := 400;
				END_IF
			END_IF

	400:	stPos.sState := CONCAT(UDINT_TO_STRING(stPos.nState) ,' - Alaphelyzetfelvétel - Várakozás robot alaphelyzetfelvételre');
			IF fbP2KRC4.bReady AND NOT fbP2KRC4.bBusy THEN
				IF bStepEnable THEN
					stPos.nState := stPos.nState + 20;
				END_IF
			END_IF			

	420:	stPos.sState := CONCAT(UDINT_TO_STRING(stPos.nState) ,' - Alaphelyzetfelvétel - Kiemelő alaphelyzetbe');
			fbP2Lift.bBasePosCmd := TRUE;
			fbP2Lift.bWorkPosCmd := FALSE;
			IF fbP2Lift.bBasePosStab THEN
				IF bStepEnable THEN
					stPos.nState := stPos.nState + 20;
				END_IF
			END_IF
			
	440:	stPos.sState := CONCAT(UDINT_TO_STRING(stPos.nState) ,' - Alaphelyzetfelvétel - Robot ellenőrzése');
			IF	fbP2KRC4.RobotIn.Status.bVacuumOutStat OR				// Robot vákuum bekapcsolva
				fbP2KRC4.RobotIn.Status.bVacuumInStat OR				// Robot vákuum visszajelzés
				fbP2KRC4.RobotIn.Status.bProdSensor THEN				// Darabérzékelő visszajelzés
					;															// A robotnál alkatrész van -> El kell tőle venni! => LINE STOP!!!
			ELSE
					stPos.nState := stPos.nState + 20;	 
			END_IF

	460:	stPos.sState := CONCAT(UDINT_TO_STRING(stPos.nState) ,' - Alaphelyzetfelvétel - Megkezdett folyamat ellenőrzése');
			IF bInProcess THEN
				stP2PalletData.nPalletState := 1;
				stP2PalletData.nErrorCode := 4209;
				stP2NcDat.N := 1;
				eP2Assy_Auto2_Result := E_TEST_STATE.FAILED;
				stP2NcDat.MESDAT[stP2NcDat.N].RESPONSE_CODE := '4209';
				stP2NcDat.MESDAT[stP2NcDat.N].RESPONSE_DESCRIPTION := 'Process error ';
				stP2NcDat.MESDAT[stP2NcDat.N].CLIENT_DATE := fbP2MesInterface.GET_LOCAL_TIME();
				stP2NcDat.MESDAT[stP2NcDat.N].TEST_STATE := INT_TO_STRING(E_TEST_STATE.FAILED);
				stP2NcDat.MESDAT[stP2NcDat.N].TEST_STEP := INT_TO_STRING(stP2NcDat.N);
				stP2NcDat.MESDAT[stP2NcDat.N].VALUE := '0';
				stPos.nState := stPos.nState + 20;
			ELSE
				stPos.nState := 600;
			END_IF

	 
//	480:	stP2.nState := 95000;
		 
			  
	480:	stPos.sState := CONCAT(UDINT_TO_STRING(stPos.nState) ,' - Alaphelyzetfelvétel - PCBA selejtezése');
		 	IF bPcbaScrap THEN
				IF fbP2MesInterface.SCRAP_SFC(stP2PalletData.sPCBACode, nP2Assy_Auto2_Index) THEN
					bPcbaScrap := false;
					stPos.nState := 19000;
				END_IF
			ELSE
				stPos.nState := 95000;
			END_IF	 
		  		
	600:	stPos.nState := 10000;
{endregion}			
			
(* Alaphelyzet *********************************************************************)
	10000:	stPos.sState := CONCAT(UDINT_TO_STRING(stPos.nState) ,' - Alaphelyzet, termékre vár');
			IF fbP2RFID.bTagPresent AND fbP2Stopper.bPalletAtStopper AND NOT bP2ScrapRepeatError  THEN
				IF bStepEnable THEN
					stPos.nState := stPos.nState + 20;	
				END_IF
			END_IF	

	(*-----=== Hordozólap adatok lekérdezése ST10-től ===-----*)
	10020:	stPos.sState := CONCAT(UDINT_TO_STRING(stPos.nState) ,' - Paletta adatok lekérdezése');
			fbP2PalletDataExchange.nIndex := fbP2RFID.nTAGData;
			IF bStepEnable THEN
				fbP2PalletDataExchange.eCommand := Read;
				stPos.nState := stPos.nState + 20;
			END_IF
			
	(*-----=== Hordozólap adatok lekérdezése ST10-től ===-----*)
	10040:	stPos.sState := CONCAT(UDINT_TO_STRING(stPos.nState) ,' - Paletta adatok lekérdezése');
			IF fbP2PalletDataExchange.bDone AND NOT fbP2PalletDataExchange.bError THEN
				IF bStepEnable THEN
					fbP2PalletDataExchange.eCommand := NoCmd;
					stPos.nState := stPos.nState + 20;
				END_IF
			END_IF

	(*-----=== Hordozólap adatok kiértékelése ===-----*)
	10060:	stPos.sState := CONCAT(UDINT_TO_STRING(stPos.nState) ,' - Paletta adatok lekérdezése');
			IF		stP2PalletData.nPalletState = 2 AND			// OK termék a palettán
					stP2PalletData.nDone.4 AND					// Kamerás ell. kész
					NOT stP2PalletData.nDone.5 THEN				// Összeszerelés még nincs kész
						IF bStepEnable THEN						// Mehet a kiemelés -> Normál folyamat
							stPos.nState := stPos.nState + 20;
						END_IF
			ELSIF	stP2PalletData.nPalletState = 42 THEN		// Teszt hordozólap a kamerához
						IF bStepEnable THEN						// Még nincs funkció -> Tovább engedés
							stPos.nState := 96000;
						END_IF
			ELSIF	stP2PalletData.nPalletState = 2 AND			// OK termék a palettán
					NOT stP2PalletData.nDone.4 THEN				// Kamerás ell. nincs kész !
						IF bStepEnable THEN						// Átemelt hordozólap!?!? -> Selejtezés
							stP2PalletData.nPalletState := 1;
							stP2PalletData.nDone.5 := TRUE;	
							stP2PalletData.nErrorCode := 4200;
							stPos.nState := 96000;
						END_IF
			ELSIF	stP2PalletData.nPalletState = 1 THEN		// Selejt termék a palettán
						IF bStepEnable THEN						// Nincs kiemelés -> Tovább engedés
							stPos.nState := 96060;
						END_IF
			ELSIF	stP2PalletData.nPalletState = 0 THEN		// Üres paletta
						IF bStepEnable THEN						// Nincs kiemelés -> Tovább engedés
							stPos.nState := 96060;
						END_IF
			ELSE												// Nincs teendő, más állomásnak szánt hordozólap
						IF bStepEnable THEN						// Nincs kiemelés -> Tovább engedés
							stPos.nState := 96060;
						END_IF			
			END_IF


	(*-----=== Alkatrészek ellenőrzése a palettán ===-----*)
	10080:	stPos.sState := CONCAT(UDINT_TO_STRING(stPos.nState) ,' - Alkatrészek ellenőrzése a palettán');
			IF	i_bP2DutSensor1 AND
				i_bP2DutSensor2 AND
				i_bP2DutSensor3 AND
				NOT i_bP2PalletSensor THEN
					IF bStepEnable THEN							// Minden a helyén mehet az összeszerelés
						stPos.nState := stPos.nState + 20;
					END_IF
			ELSE
					IF bStepEnable THEN							// Hiányzó alkatrészek -> Nem lehet összeépíteni -> selejtezés
						stP2PalletData.nPalletState := 1;		// Paletta selejtre jelentése
						stP2PalletData.nDone.5 := TRUE;			// Állomás készre jelentése
						stP2PalletData.nErrorCode := 4201;		// Hibakód beírása
 						stPos.nState := 96000;					// Paletta adatok tárolása.
					END_IF				
			END_IF

	(*-----=== MES engedély ellenőrzése ===-----*)
	10100:	stPos.sState := CONCAT(UDINT_TO_STRING(stPos.nState) ,' - MES Engedély ellenőrzése');
			IF bMesEnable THEN
				IF bStepEnable THEN
					stPos.nState := 15000;
				END_IF
			ELSE
				IF bStepEnable THEN
					stPos.nState := 16000;
				END_IF				
			END_IF

	(*-----=== MES 3010 (Start SFC) ===-----*)	
	15000:	stPos.sState := CONCAT(UDINT_TO_STRING(stPos.nState) ,' - Start SFC (3010)');	
			IF bMesEnable THEN
				IF fbP2MesInterface.START_SFC(stP2PalletData.sMRTCode, nP2Assy_Auto2_Index) THEN
					IF stP2MesResp.RESP_CODE='0' THEN
						IF bStepEnable THEN
							bInProcess := TRUE;
							stPos.nState := stPos.nState + 20;
						END_IF
					ELSE
						IF bStepEnable THEN
							stP2PalletData.nPalletState := 1;		// Paletta selejtre jelentése
							stP2PalletData.nDone.5 := TRUE;			// Állomás készre jelentése
							stP2PalletData.nErrorCode := 4202;		// Hibakód beírása
							stPos.nState := 96000;					// Paletta adatok tárolása.
						END_IF
					END_IF
				END_IF
			ELSE
				IF bStepEnable THEN
					bInProcess := TRUE;
					stPos.nState := stPos.nState + 20;
				END_IF	
			END_IF

	15020:	stPos.nState := 16000;	
		
(*-----=== Recept betöltés ===-----*)
	16000:
			IF bStepEnable THEN
				stPos.nState := 18000;
			END_IF	

(*-----=== Normál folyamat ===-----*)
	18000:	stPos.sState := CONCAT(UDINT_TO_STRING(stPos.nState) ,' - Kiemelő munkahelyzetbe');
			fbP2Lift.bBasePosCmd := FALSE;
			fbP2Lift.bWorkPosCmd := TRUE;
			IF fbP2Lift.bWorkPosStab THEN
				IF bStepEnable THEN
					stPos.nState := stPos.nState + 20;
				END_IF
			END_IF

	18020:	stPos.sState := CONCAT(UDINT_TO_STRING(stPos.nState) ,' - PCBA felvétele a hordozólapról');
			fbP2KRC4.nProgNr := 10;
			fbP2KRC4.bExecuteProg := TRUE;
			IF fbP2KRC4.bDone THEN
				fbP2KRC4.bExecuteProg := FALSE;
				IF bStepEnable THEN
					stPos.nState := stPos.nState + 20;
				END_IF
			END_IF			
			
	18040:	stPos.sState := CONCAT(UDINT_TO_STRING(stPos.nState) ,' - PCBA behelyezése');
			fbP2KRC4.nProgNr := 11;
			fbP2KRC4.bExecuteProg := TRUE;
			IF fbP2KRC4.bDone THEN
				fbP2KRC4.bExecuteProg := FALSE;
				IF bStepEnable THEN
					stPos.nState := stPos.nState + 20;
				END_IF
			END_IF			
						
	18060:	stPos.sState := CONCAT(UDINT_TO_STRING(stPos.nState) ,' - Cover felvétele a hordozólapról');
			fbP2KRC4.nProgNr := 12;
			fbP2KRC4.bExecuteProg := TRUE;
			IF fbP2KRC4.bDone THEN
				fbP2KRC4.bExecuteProg := FALSE;
				IF bStepEnable THEN
					stPos.nState := stPos.nState + 20;
				END_IF
			END_IF			

(*												//	Ciklusidő gyorsítás miatt Interlock bit figyelése a Done bit helyett 2021.03.25 ZZs		
	18080:	stP2.sState := CONCAT(UDINT_TO_STRING(stP2.nState) ,' - Cover behelyezése');
			fbP2KRC4.nProgNr := 13;
			fbP2KRC4.bExecuteProg := TRUE;
			IF fbP2KRC4.bDone THEN
				fbP2KRC4.bExecuteProg := FALSE;
				IF bStepEnable THEN
					stP2PalletData.nDone.5 := TRUE;
					stP2.nState := stP2.nState + 20;
				END_IF
			END_IF					
*)
	18080:	stPos.sState := CONCAT(UDINT_TO_STRING(stPos.nState) ,' - Cover behelyezése');
			fbP2KRC4.nProgNr := 13;
			fbP2KRC4.bExecuteProg := TRUE;
			IF fbP2KRC4.RobotIn.Status.bIntMoveInPalettZone THEN
				IF bStepEnable THEN
					stPos.nState := stPos.nState + 20;
				END_IF
			END_IF					

	18100:	stPos.sState := CONCAT(UDINT_TO_STRING(stPos.nState) ,' - Várakozás Cover behelyezésére');			
			IF NOT fbP2KRC4.RobotIn.Status.bIntMoveInPalettZone THEN
				IF bStepEnable THEN
					stP2PalletData.nDone.5 := TRUE;
					stPos.nState := stPos.nState + 20;
				END_IF
			END_IF					

	18120:
(*
Inventory sorrend
0:	MRT
1:	Carrier
2:	Cover
3:	PCBA
4:	Fan
*)
			stP2MrtInventoryList.LIST[0] := stP2PalletData.stInventoryList.LIST[3];			// PCBA
			stP2MrtInventoryList.LIST[1] := stP2PalletData.stInventoryList.LIST[2];			// Cover
			stP2MrtInventoryList.LIST[2] := stP2PalletData.stInventoryList.LIST[4];			// FAN
			stPos.nState := stPos.nState + 20;
			
(*-----=== MES  (Assembly by inventory 2138) ===-----*)
	18140:	stPos.sState := CONCAT(UDINT_TO_STRING(stPos.nState) ,' - Assemble inventory (2138)');
			IF bMesEnable THEN	
				IF fbP2MesInterface.ASSEMBLE_BY_INVENTORY_LIST(stP2PalletData.sMRTCode, nP2Assy_Auto2_Index, stP2MrtInventoryList) THEN
					IF stP2MesResp.RESP_CODE='0' THEN
						eP2Assy_Auto2_Result:=E_TEST_STATE.PASSED;
					ELSE
						stP2PalletData.nPalletState := 1;				// Paletta selejtre jelentése
						stP2PalletData.nDone.5 := TRUE;					// Állomás készre jelentése
						stP2PalletData.nErrorCode := 4210;				// Hibakód beírása
						stP2NcDat.N := 1;
						eP2Assy_Auto2_Result := E_TEST_STATE.FAILED;
						stP2NcDat.MESDAT[stP2NcDat.N].RESPONSE_CODE := '4210';
						stP2NcDat.MESDAT[stP2NcDat.N].RESPONSE_DESCRIPTION := 'Process error ';
						stP2NcDat.MESDAT[stP2NcDat.N].CLIENT_DATE := fbP2MesInterface.GET_LOCAL_TIME();
						stP2NcDat.MESDAT[stP2NcDat.N].TEST_STATE := INT_TO_STRING(E_TEST_STATE.FAILED);
						stP2NcDat.MESDAT[stP2NcDat.N].TEST_STEP := INT_TO_STRING(stP2NcDat.N);
						stP2NcDat.MESDAT[stP2NcDat.N].VALUE := '0';
					END_IF
					IF bStepEnable THEN
						stPos.nState := stPos.nState + 20;
					END_IF
				END_IF
			ELSE
				IF bStepEnable THEN
					stPos.nState := stPos.nState + 20;
				END_IF
			END_IF

	18160:	stPos.nState := 95000;

(*-----=== MES 503 (Log Nc) ===-----*)
	95000:	stPos.sState := CONCAT(UDINT_TO_STRING(stPos.nState) ,' - Log Nc data (503)  MRT');
			IF stP2PalletData.nPalletState = 1 AND bMesEnable THEN	
				IF fbP2MesInterface.ASSY_SAVE_NCDAT(stP2PalletData.sMRTCode,nP2Assy_Auto2_Index,stP2NcDat) THEN
						IF bStepEnable THEN
							stPos.nState := stPos.nState + 20;
						END_IF							
				END_IF
			ELSE
				stPos.nState := stPos.nState + 20;	
			END_IF

(*-----=== MES 3011 (Complete SFC) ===-----*)
	95020:	stPos.sState := CONCAT(UDINT_TO_STRING(stPos.nState) ,' - Complete SFC (3011)');	
			IF bMesEnable THEN
				IF fbP2MesInterface.COMPLETE_SFC(stP2PalletData.sMRTCode, nP2Assy_Auto2_Index, eP2Assy_Auto2_Result) THEN
					IF stP2MesResp.RESP_CODE='0' THEN
						IF bStepEnable THEN
								stPos.nState := 96000;
						END_IF
					ELSE
						IF bStepEnable THEN
								stP2PalletData.nPalletState := 1;				// Paletta selejtre jelentése
								stP2PalletData.nDone.5 := TRUE;					// Állomás készre jelentése
								stP2PalletData.nErrorCode := 4205;				// Hibakód beírása
								stPos.nState := 96000;
						END_IF
					END_IF
				END_IF
			ELSE
				IF bStepEnable THEN
						stPos.nState := 96000;
				END_IF
			END_IF

	(*-----=== Hordozólap adatok feltöltése ST10-be ===-----*)
	96000:	stPos.sState := CONCAT(UDINT_TO_STRING(stPos.nState) ,' - Paletta adatok feltöltése');
			fbP2PalletDataExchange.nIndex := fbP2RFID.nTAGData;
			IF bStepEnable THEN
				fbP2PalletDataExchange.eCommand := Write;
				stPos.nState := stPos.nState + 20;
			END_IF
			
	(*-----=== Hordozólap adatok feltöltése ST10-be ===-----*)
	96020:	stPos.sState := CONCAT(UDINT_TO_STRING(stPos.nState) ,' - Paletta adatok feltöltése');
			IF fbP2PalletDataExchange.bDone AND NOT fbP2PalletDataExchange.bError THEN
				IF bStepEnable THEN
					fbP2PalletDataExchange.eCommand := NoCmd;
					stPos.nState := stPos.nState + 20;
				END_IF
			END_IF

	96040:	stPos.nState := 96060;	
	
	(*-----=== Normál folyamat kész ===-----*)		
	96060:	stPos.sState := CONCAT(UDINT_TO_STRING(stPos.nState) ,' - Kiemelő alaphelyzetbe');
			bInProcess := FALSE;
			fbP2Lift.bBasePosCmd := TRUE;
			fbP2Lift.bWorkPosCmd := FALSE;
			IF fbP2Lift.bBasePosStab THEN
				IF bStepEnable THEN
					stPos.nState := stPos.nState + 20;
				END_IF
			END_IF		

	96080:	stPos.sState := CONCAT(UDINT_TO_STRING(stPos.nState) ,' - Ismétlődő hibák ellenőrzése');
			IF NOT bP2ScrapRepeatError THEN
				stPos.nState := 100000;
			END_IF

(*-----=== Automata ciklus befejezése ===-----*)
	100000:	stPos.sState := CONCAT(UDINT_TO_STRING(stPos.nState) ,' - Várakozás hordozólap elengedésre');
			IF NOT fbP2Stopper.bPalletAtStopper THEN
				IF bStepEnable THEN
					stPos.nState := stPos.nState + 20;
				END_IF
			END_IF		

	100020:	stPos.sState := CONCAT(UDINT_TO_STRING(stPos.nState) ,' - Robot vezérlő bitek törlése');
			IF fbP2KRC4.bDone OR NOT fbP2KRC4.bExecuteProg THEN
				fbP2KRC4.bExecuteProg := FALSE;
				IF bStepEnable THEN
					stPos.nState := 10000;
				END_IF
			END_IF	

			
(* Kézi üzem *********************************************************************)
	150000:	stPos.sState := CONCAT(UDINT_TO_STRING(stPos.nState) ,' - Kézi üzem');
			IF 	NOT bManualMode AND
				fbP2KRC4.RobotIn.Status.bExt THEN					// A robotnak is external-ba kell lennie!
					stPos.nState := 0;
			ELSE
				;
			END_IF
			
	(* Hibakezelés *********************************************************************)
	200000:	stPos.sState := CONCAT(UDINT_TO_STRING(stPos.nState) ,CONCAT(' - Hiba, ebből az állapotból: ' ,stPos.sState));
			fbP2PalletDataExchange.eCommand := NoCmd;
			stPos.bError := TRUE;
			stPos.nState := stPos.nState + 20;

	(* Hibakezelés *********************************************************************)
	200020:	IF bAckP THEN
				CASE stPos.nStateLast OF
					(* Alaphelyzet felvétel folyamán *)
					0..9999:	stPos.nState := 0;
				ELSE 			stPos.nState := 0;
				END_CASE
				stPos.bError := FALSE;
			END_IF
ELSE
	stPos.sState := CONCAT(UDINT_TO_STRING(stPos.nState) ,' - Nem használt állapot');
END_CASE
			
			
]]></ST>
    </Implementation>
    <Action Name="DataExchange" Id="{efc1dd3b-63f9-4440-81d6-7a71dd6a5afe}">
      <Implementation>
        <ST><![CDATA[fbP2PalletDataExchange(
	stPalletData:= stP2PalletData, 
	sName:= 'P2 Robot pos.', 
	bAck:= bAckP, 
	sAMSNetId:= sST10_NetId, 
	stEventEntry:= TC_EVENTS.MyEvent.fbP2PalletDataExchange);]]></ST>
      </Implementation>
    </Action>
    <Action Name="Diag" Id="{23eb0897-53b9-4717-8b24-5084a97fd800}">
      <Implementation>
        <ST><![CDATA[fbP2FullCycleTime(
	bPalletSensor:= fbP2Stopper.i_bPalettSensor,
	timTimeMax:= T#200S,
	nCurrentCycleTime=> ,
	arrCycleTimes=> );
	
]]></ST>
      </Implementation>
    </Action>
    <Action Name="KRC4" Id="{bbfb2d1d-c15e-4035-9d0e-a22c00626c9f}">
      <Implementation>
        <ST><![CDATA[fbP2KRC4(
	sName:= 'Kuka KRC4 robot vezérlő', 
	bEn:= i_bDoorOK, 
	bZoneEnable:= fbP1AxisX.Axis.NcToPlc.ActPos <= 390,
	timBaseState:= T#20S, 
	bAck:= bAckP);]]></ST>
      </Implementation>
    </Action>
    <Action Name="MES" Id="{2947815f-50ce-4eab-809d-7eeb1ac6ada6}">
      <Implementation>
        <ST><![CDATA[fbP2MesInterface(
	HOST:= '127.0.0.1', 
	PORT:= 5500, 
	ENABLE:= TRUE, 
	RESET:= fbP2MesInterface.ERROR, 
	STX:= , 
	ETX:= , 
	RESP:= stP2MesResp, 
	TEST_ADAPTER:= '0', 
	ADAPTER_ID:= '1', 
	BUSY=> , 
	READY=> , 
	DONE=> , 
	ERROR=> , 
	ERROR_ID=> );]]></ST>
      </Implementation>
    </Action>
    <Action Name="Pneu" Id="{27aa4419-eb7e-4689-bc28-a91bc69375d1}">
      <Implementation>
        <ST><![CDATA[fbP2Lift(
	sName:= 'Z4.5', 
	sBasePosSensor:= 'S4231', 
	sWorkPosSensor:= 'S4232', 
	bEn:= i_bDoorOK, 
	bEHA:= bGlobalEHA, 
	bDisableManualCmd:= NOT bManualMode, 
	bAck:= bAckP, 
	timBasePos:= , 
	timWorkPos:= , 
	stBasePosEvent:= TC_Events.MyEvent.fbP2LiftBPE,
	stWorkPosEvent:= TC_EVENTS.MyEvent.fbP2LiftWPE);]]></ST>
      </Implementation>
    </Action>
    <Action Name="RFID" Id="{e6dadc69-c1b8-4339-a21a-486d9e55b27f}">
      <Implementation>
        <ST><![CDATA[fbP2RFID(sName:= 'P2 RFID');]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="P2_Robot">
      <LineId Id="12" Count="18" />
      <LineId Id="388" Count="0" />
      <LineId Id="542" Count="0" />
      <LineId Id="34" Count="7" />
      <LineId Id="571" Count="0" />
      <LineId Id="42" Count="8" />
      <LineId Id="572" Count="0" />
      <LineId Id="51" Count="9" />
      <LineId Id="1366" Count="0" />
      <LineId Id="61" Count="3" />
      <LineId Id="580" Count="1" />
      <LineId Id="66" Count="1" />
      <LineId Id="70" Count="0" />
      <LineId Id="419" Count="2" />
      <LineId Id="71" Count="1" />
      <LineId Id="74" Count="6" />
      <LineId Id="392" Count="0" />
      <LineId Id="389" Count="0" />
      <LineId Id="398" Count="1" />
      <LineId Id="395" Count="1" />
      <LineId Id="400" Count="1" />
      <LineId Id="397" Count="0" />
      <LineId Id="394" Count="0" />
      <LineId Id="390" Count="1" />
      <LineId Id="81" Count="7" />
      <LineId Id="402" Count="9" />
      <LineId Id="414" Count="0" />
      <LineId Id="412" Count="0" />
      <LineId Id="417" Count="1" />
      <LineId Id="415" Count="1" />
      <LineId Id="413" Count="0" />
      <LineId Id="422" Count="4" />
      <LineId Id="89" Count="0" />
      <LineId Id="427" Count="0" />
      <LineId Id="429" Count="6" />
      <LineId Id="428" Count="0" />
      <LineId Id="163" Count="0" />
      <LineId Id="940" Count="1" />
      <LineId Id="945" Count="0" />
      <LineId Id="943" Count="0" />
      <LineId Id="947" Count="2" />
      <LineId Id="944" Count="0" />
      <LineId Id="942" Count="0" />
      <LineId Id="952" Count="0" />
      <LineId Id="950" Count="0" />
      <LineId Id="1139" Count="9" />
      <LineId Id="1196" Count="0" />
      <LineId Id="955" Count="0" />
      <LineId Id="957" Count="0" />
      <LineId Id="954" Count="0" />
      <LineId Id="1198" Count="0" />
      <LineId Id="1186" Count="0" />
      <LineId Id="1199" Count="0" />
      <LineId Id="1258" Count="1" />
      <LineId Id="1191" Count="0" />
      <LineId Id="1257" Count="0" />
      <LineId Id="1192" Count="0" />
      <LineId Id="1263" Count="0" />
      <LineId Id="1194" Count="1" />
      <LineId Id="1260" Count="0" />
      <LineId Id="1262" Count="0" />
      <LineId Id="1261" Count="0" />
      <LineId Id="1187" Count="0" />
      <LineId Id="164" Count="6" />
      <LineId Id="600" Count="0" />
      <LineId Id="172" Count="4" />
      <LineId Id="588" Count="0" />
      <LineId Id="180" Count="8" />
      <LineId Id="589" Count="0" />
      <LineId Id="189" Count="18" />
      <LineId Id="1169" Count="0" />
      <LineId Id="1171" Count="0" />
      <LineId Id="1170" Count="0" />
      <LineId Id="208" Count="15" />
      <LineId Id="563" Count="0" />
      <LineId Id="552" Count="2" />
      <LineId Id="565" Count="1" />
      <LineId Id="617" Count="0" />
      <LineId Id="555" Count="4" />
      <LineId Id="568" Count="0" />
      <LineId Id="567" Count="0" />
      <LineId Id="569" Count="0" />
      <LineId Id="560" Count="2" />
      <LineId Id="564" Count="0" />
      <LineId Id="224" Count="10" />
      <LineId Id="237" Count="0" />
      <LineId Id="1200" Count="22" />
      <LineId Id="238" Count="0" />
      <LineId Id="1223" Count="0" />
      <LineId Id="670" Count="0" />
      <LineId Id="1224" Count="0" />
      <LineId Id="243" Count="4" />
      <LineId Id="253" Count="6" />
      <LineId Id="261" Count="2" />
      <LineId Id="999" Count="0" />
      <LineId Id="455" Count="1" />
      <LineId Id="462" Count="0" />
      <LineId Id="458" Count="0" />
      <LineId Id="463" Count="0" />
      <LineId Id="459" Count="2" />
      <LineId Id="443" Count="0" />
      <LineId Id="453" Count="0" />
      <LineId Id="472" Count="8" />
      <LineId Id="454" Count="0" />
      <LineId Id="481" Count="8" />
      <LineId Id="1337" Count="0" />
      <LineId Id="490" Count="6" />
      <LineId Id="535" Count="0" />
      <LineId Id="497" Count="1" />
      <LineId Id="467" Count="0" />
      <LineId Id="1130" Count="0" />
      <LineId Id="1327" Count="3" />
      <LineId Id="1332" Count="0" />
      <LineId Id="1334" Count="2" />
      <LineId Id="1301" Count="0" />
      <LineId Id="1338" Count="0" />
      <LineId Id="1340" Count="0" />
      <LineId Id="1342" Count="0" />
      <LineId Id="1359" Count="0" />
      <LineId Id="1343" Count="2" />
      <LineId Id="1326" Count="0" />
      <LineId Id="802" Count="0" />
      <LineId Id="1285" Count="6" />
      <LineId Id="1158" Count="0" />
      <LineId Id="1133" Count="0" />
      <LineId Id="1159" Count="0" />
      <LineId Id="1293" Count="1" />
      <LineId Id="1132" Count="0" />
      <LineId Id="1044" Count="0" />
      <LineId Id="813" Count="0" />
      <LineId Id="1106" Count="0" />
      <LineId Id="1033" Count="1" />
      <LineId Id="1036" Count="1" />
      <LineId Id="1039" Count="0" />
      <LineId Id="1177" Count="0" />
      <LineId Id="1162" Count="0" />
      <LineId Id="1179" Count="6" />
      <LineId Id="1178" Count="0" />
      <LineId Id="1040" Count="0" />
      <LineId Id="1047" Count="1" />
      <LineId Id="1046" Count="0" />
      <LineId Id="499" Count="0" />
      <LineId Id="1107" Count="0" />
      <LineId Id="1109" Count="3" />
      <LineId Id="1108" Count="0" />
      <LineId Id="1095" Count="0" />
      <LineId Id="1075" Count="0" />
      <LineId Id="1068" Count="1" />
      <LineId Id="1089" Count="0" />
      <LineId Id="1070" Count="4" />
      <LineId Id="1091" Count="1" />
      <LineId Id="1067" Count="0" />
      <LineId Id="1080" Count="0" />
      <LineId Id="1066" Count="0" />
      <LineId Id="1065" Count="0" />
      <LineId Id="1100" Count="0" />
      <LineId Id="1057" Count="1" />
      <LineId Id="1096" Count="1" />
      <LineId Id="1059" Count="1" />
      <LineId Id="1098" Count="0" />
      <LineId Id="1244" Count="1" />
      <LineId Id="1163" Count="0" />
      <LineId Id="1099" Count="0" />
      <LineId Id="1061" Count="0" />
      <LineId Id="1063" Count="1" />
      <LineId Id="1101" Count="0" />
      <LineId Id="1104" Count="1" />
      <LineId Id="1102" Count="1" />
      <LineId Id="1031" Count="0" />
      <LineId Id="519" Count="1" />
      <LineId Id="590" Count="0" />
      <LineId Id="524" Count="8" />
      <LineId Id="591" Count="0" />
      <LineId Id="533" Count="1" />
      <LineId Id="339" Count="0" />
      <LineId Id="1242" Count="1" />
      <LineId Id="517" Count="0" />
      <LineId Id="1228" Count="6" />
      <LineId Id="1237" Count="0" />
      <LineId Id="1240" Count="0" />
      <LineId Id="1226" Count="1" />
      <LineId Id="1253" Count="2" />
      <LineId Id="1251" Count="0" />
      <LineId Id="346" Count="4" />
      <LineId Id="352" Count="3" />
      <LineId Id="1350" Count="0" />
      <LineId Id="1353" Count="2" />
      <LineId Id="1357" Count="1" />
      <LineId Id="1346" Count="1" />
      <LineId Id="359" Count="3" />
      <LineId Id="1367" Count="0" />
      <LineId Id="363" Count="24" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="P2_Robot.DataExchange">
      <LineId Id="30" Count="4" />
      <LineId Id="15" Count="0" />
    </LineIds>
    <LineIds Name="P2_Robot.Diag">
      <LineId Id="2" Count="3" />
      <LineId Id="1" Count="0" />
      <LineId Id="7" Count="1" />
    </LineIds>
    <LineIds Name="P2_Robot.KRC4">
      <LineId Id="9" Count="3" />
      <LineId Id="18" Count="0" />
      <LineId Id="31" Count="0" />
    </LineIds>
    <LineIds Name="P2_Robot.MES">
      <LineId Id="18" Count="13" />
      <LineId Id="17" Count="0" />
    </LineIds>
    <LineIds Name="P2_Robot.Pneu">
      <LineId Id="2" Count="0" />
      <LineId Id="25" Count="8" />
      <LineId Id="1" Count="0" />
      <LineId Id="34" Count="0" />
    </LineIds>
    <LineIds Name="P2_Robot.RFID">
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>